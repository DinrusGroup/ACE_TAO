// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.3.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be\be_codegen.cpp:149

#ifndef _TAO_IDL_CCM_HOMECONFIGURATIONC_HPUYAI_H_
#define _TAO_IDL_CCM_HOMECONFIGURATIONC_HPUYAI_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "CCM_Stub_Export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "ccm/CCM_ConfiguratorC.h"
#include "ccm/CCM_StandardConfiguratorC.h"
#include "ccm/CCM_HomeC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 3 || TAO_BETA_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO CCM_STUB_Export

// TAO_IDL - Generated from
// be\be_visitor_root\root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_module\module_ch.cpp:35

namespace Components
{

  // TAO_IDL - Generated from
  // be\be_interface.cpp:748

#if !defined (_COMPONENTS_HOMECONFIGURATION__VAR_OUT_CH_)
#define _COMPONENTS_HOMECONFIGURATION__VAR_OUT_CH_

  class HomeConfiguration;
  typedef HomeConfiguration *HomeConfiguration_ptr;

  typedef
    TAO_Objref_Var_T<
        HomeConfiguration
      >
    HomeConfiguration_var;
  
  typedef
    TAO_Objref_Out_T<
        HomeConfiguration
      >
    HomeConfiguration_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface\interface_ch.cpp:40

  class CCM_STUB_Export HomeConfiguration
    : public virtual ::Components::CCMHome
  
  {
  public:
    friend class TAO::Narrow_Utils<HomeConfiguration>;

    // TAO_IDL - Generated from
    // be\be_type.cpp:304

    typedef HomeConfiguration_ptr _ptr_type;
    typedef HomeConfiguration_var _var_type;
    typedef HomeConfiguration_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static HomeConfiguration_ptr _duplicate (HomeConfiguration_ptr obj);

    static void _tao_release (HomeConfiguration_ptr obj);

    static HomeConfiguration_ptr _narrow (::CORBA::Object_ptr obj);
    static HomeConfiguration_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static HomeConfiguration_ptr _nil (void);

    virtual void set_configuration_values (
      const ::Components::ConfigValues & config);

    // TAO_IDL - Generated from
    // be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    HomeConfiguration (void);

    // Concrete non-local interface only.
    HomeConfiguration (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    HomeConfiguration (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~HomeConfiguration (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    HomeConfiguration (const HomeConfiguration &);

    void operator= (const HomeConfiguration &);
  };

  // TAO_IDL - Generated from
  // be\be_visitor_typecode\typecode_decl.cpp:34

  extern CCM_STUB_Export ::CORBA::TypeCode_ptr const _tc_HomeConfiguration;

// TAO_IDL - Generated from
// be\be_visitor_module\module_ch.cpp:64

} // module Components

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:145

#if !defined (_COMPONENTS_HOMECONFIGURATION__ARG_TRAITS_)
#define _COMPONENTS_HOMECONFIGURATION__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Components::HomeConfiguration>
    : public
        Object_Arg_Traits_T<
            ::Components::HomeConfiguration_ptr,
            ::Components::HomeConfiguration_var,
            ::Components::HomeConfiguration_out,
            TAO::Objref_Traits<Components::HomeConfiguration>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COMPONENTS_HOMECONFIGURATION__TRAITS_)
#define _COMPONENTS_HOMECONFIGURATION__TRAITS_

  template<>
  struct CCM_STUB_Export Objref_Traits< ::Components::HomeConfiguration>
  {
    static ::Components::HomeConfiguration_ptr duplicate (
        ::Components::HomeConfiguration_ptr p);
    static void release (
        ::Components::HomeConfiguration_ptr p);
    static ::Components::HomeConfiguration_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Components::HomeConfiguration_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Components
{
  CCM_STUB_Export void operator<<= ( ::CORBA::Any &, HomeConfiguration_ptr); // copying
  CCM_STUB_Export void operator<<= ( ::CORBA::Any &, HomeConfiguration_ptr *); // non-copying
  CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, HomeConfiguration_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

CCM_STUB_Export void operator<<= (::CORBA::Any &, Components::HomeConfiguration_ptr); // copying
CCM_STUB_Export void operator<<= (::CORBA::Any &, Components::HomeConfiguration_ptr *); // non-copying
CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Components::HomeConfiguration_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be\be_visitor_interface\cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

CCM_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::HomeConfiguration_ptr );
CCM_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Components::HomeConfiguration_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "CCM_HomeConfigurationC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

