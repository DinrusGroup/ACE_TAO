// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.3.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be\be_codegen.cpp:149

#ifndef _TAO_IDL_CCM_CONTEXTC_UAAKUA_H_
#define _TAO_IDL_CCM_CONTEXTC_UAAKUA_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "CCM_LEM_Stub_Export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "ccm/SecurityC.h"
#include "ccm/CCM_TransactionC.h"
#include "ccm/CCM_HomeC.h"
#include "ccm/CCM_CCMExceptionC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 3 || TAO_BETA_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO CCM_LEM_STUB_Export

// TAO_IDL - Generated from
// be\be_visitor_module\module_ch.cpp:35

namespace Components
{

  // TAO_IDL - Generated from
  // be\be_visitor_exception\exception_ch.cpp:41

  class CCM_LEM_STUB_Export IllegalState : public ::CORBA::UserException
  {
  public:

    IllegalState (void);
    IllegalState (const IllegalState &);
    ~IllegalState (void);

    IllegalState &operator= (const IllegalState &);

    static void _tao_any_destructor (void *);

    static IllegalState *_downcast ( ::CORBA::Exception *);
    static const IllegalState *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be\be_visitor_typecode\typecode_decl.cpp:34

  extern CCM_LEM_STUB_Export ::CORBA::TypeCode_ptr const _tc_IllegalState;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:748

#if !defined (_COMPONENTS_CCMCONTEXT__VAR_OUT_CH_)
#define _COMPONENTS_CCMCONTEXT__VAR_OUT_CH_

  class CCMContext;
  typedef CCMContext *CCMContext_ptr;

  typedef
    TAO_Objref_Var_T<
        CCMContext
      >
    CCMContext_var;
  
  typedef
    TAO_Objref_Out_T<
        CCMContext
      >
    CCMContext_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface\interface_ch.cpp:40

  class CCM_LEM_STUB_Export CCMContext
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // be\be_type.cpp:304

    typedef CCMContext_ptr _ptr_type;
    typedef CCMContext_var _var_type;
    typedef CCMContext_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static CCMContext_ptr _duplicate (CCMContext_ptr obj);

    static void _tao_release (CCMContext_ptr obj);

    static CCMContext_ptr _narrow (::CORBA::Object_ptr obj);
    static CCMContext_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CCMContext_ptr _nil (void);

    virtual ::Components::CCMHome_ptr get_CCM_home (
      void) = 0;

    virtual ::CORBA::Object_ptr resolve_service_reference (
      const char * service_id) = 0;

    virtual void install_service_component_reference (
      const char * service_id,
      ::CORBA::Object_ptr objref) = 0;

    virtual ::CORBA::Object_ptr uninstall_service_component_reference (
      const char * service_id) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CCMContext (void);

    

    virtual ~CCMContext (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CCMContext (const CCMContext &);

    void operator= (const CCMContext &);
  };

  // TAO_IDL - Generated from
  // be\be_visitor_typecode\typecode_decl.cpp:34

  extern CCM_LEM_STUB_Export ::CORBA::TypeCode_ptr const _tc_CCMContext;

// TAO_IDL - Generated from
// be\be_visitor_module\module_ch.cpp:64

} // module Components

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COMPONENTS_CCMCONTEXT__TRAITS_)
#define _COMPONENTS_CCMCONTEXT__TRAITS_

  template<>
  struct CCM_LEM_STUB_Export Objref_Traits< ::Components::CCMContext>
  {
    static ::Components::CCMContext_ptr duplicate (
        ::Components::CCMContext_ptr p);
    static void release (
        ::Components::CCMContext_ptr p);
    static ::Components::CCMContext_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Components::CCMContext_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_exception\any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Components
{
  

  CCM_LEM_STUB_Export void operator<<= (::CORBA::Any &, const ::Components::IllegalState &); // copying version
  CCM_LEM_STUB_Export void operator<<= (::CORBA::Any &, ::Components::IllegalState*); // noncopying version
  CCM_LEM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Components::IllegalState *&); // deprecated
CCM_LEM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Components::IllegalState *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



CCM_LEM_STUB_Export void operator<<= (::CORBA::Any &, const Components::IllegalState &); // copying version
CCM_LEM_STUB_Export void operator<<= (::CORBA::Any &, Components::IllegalState*); // noncopying version
CCM_LEM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Components::IllegalState *&); // deprecated
CCM_LEM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Components::IllegalState *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Components
{
  CCM_LEM_STUB_Export void operator<<= ( ::CORBA::Any &, CCMContext_ptr); // copying
  CCM_LEM_STUB_Export void operator<<= ( ::CORBA::Any &, CCMContext_ptr *); // non-copying
  CCM_LEM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CCMContext_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

CCM_LEM_STUB_Export void operator<<= (::CORBA::Any &, Components::CCMContext_ptr); // copying
CCM_LEM_STUB_Export void operator<<= (::CORBA::Any &, Components::CCMContext_ptr *); // non-copying
CCM_LEM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Components::CCMContext_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be\be_visitor_exception\cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



CCM_LEM_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::IllegalState &);
CCM_LEM_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Components::IllegalState &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_codegen.cpp:1700
#include /**/ "ace/post.h"

#endif /* ifndef */

