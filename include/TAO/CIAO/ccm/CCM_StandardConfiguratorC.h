// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.3.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be\be_codegen.cpp:149

#ifndef _TAO_IDL_CCM_STANDARDCONFIGURATORC_MPY6JW_H_
#define _TAO_IDL_CCM_STANDARDCONFIGURATORC_MPY6JW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "CCM_Stub_Export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Sequence_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "ccm/CCM_ConfiguratorC.h"
#include "ccm/CCM_NavigationC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 3 || TAO_BETA_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO CCM_STUB_Export

// TAO_IDL - Generated from
// be\be_visitor_module\module_ch.cpp:35

namespace Components
{

  // TAO_IDL - Generated from
  // be\be_valuetype.cpp:564

  

#if !defined (_COMPONENTS_CONFIGVALUE__VAR_OUT_CH_)
#define _COMPONENTS_CONFIGVALUE__VAR_OUT_CH_

  class ConfigValue;
  typedef
    TAO_Value_Var_T<
        ConfigValue
      >
    ConfigValue_var;
  
  typedef
    TAO_Value_Out_T<
        ConfigValue
      >
    ConfigValue_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_valuetype\valuetype_ch.cpp:50

  class CCM_STUB_Export ConfigValue
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be\be_type.cpp:304

    typedef ConfigValue * _ptr_type;
    typedef ConfigValue_var _var_type;
    typedef ConfigValue_out _out_type;

    static void _tao_any_destructor (void *);

    static ConfigValue* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        ConfigValue *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be\be_visitor_valuetype\field_ch.cpp:608

    virtual void name (char *val) = 0;
    virtual void name (const char *val) = 0;
    virtual void name (const ::CORBA::String_var &val) = 0;
    virtual const char *name (void) const = 0;
  
  public:

    // TAO_IDL - Generated from
    // be\be_visitor_valuetype\field_ch.cpp:459

    virtual void value (const ::CORBA::Any &) = 0;
    virtual const ::CORBA::Any &value (void) const = 0;
    virtual ::CORBA::Any &value (void) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_valuetype\valuetype_ch.cpp:238
  
  protected:
    ConfigValue (void);
    virtual ~ConfigValue (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    ConfigValue (const ConfigValue &);
    void operator= (const ConfigValue &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Components_ConfigValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Components_ConfigValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be\be_visitor_valuetype\valuetype_init_ch.cpp:57

  class CCM_STUB_Export ConfigValue_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    ConfigValue_init (void);

    static ConfigValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    virtual ~ConfigValue_init (void);
  };

  // TAO_IDL - Generated from
  // be\be_visitor_typecode\typecode_decl.cpp:34

  extern CCM_STUB_Export ::CORBA::TypeCode_ptr const _tc_ConfigValue;

  // TAO_IDL - Generated from
  // be\be_visitor_sequence\sequence_ch.cpp:99

#if !defined (_COMPONENTS_CONFIGVALUES_CH_)
#define _COMPONENTS_CONFIGVALUES_CH_

  class ConfigValues;

  typedef
    ::TAO_VarSeq_Var_T<
        ConfigValues
      >
    ConfigValues_var;

  typedef
    ::TAO_Seq_Out_T<
        ConfigValues
      >
    ConfigValues_out;

  class CCM_STUB_Export ConfigValues
    : public
        ::TAO::unbounded_valuetype_sequence<
            ConfigValue,
            ConfigValue_var
          >
  {
  public:
    ConfigValues (void);
    ConfigValues ( ::CORBA::ULong max);
    ConfigValues (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ConfigValue ** buffer,
      ::CORBA::Boolean release = false);
    ConfigValues (const ConfigValues &);
    virtual ~ConfigValues (void);
    

    // TAO_IDL - Generated from
    // be\be_type.cpp:304

    
    typedef ConfigValues_var _var_type;
    typedef ConfigValues_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode\typecode_decl.cpp:34

  extern CCM_STUB_Export ::CORBA::TypeCode_ptr const _tc_ConfigValues;

// TAO_IDL - Generated from
// be\be_visitor_module\module_ch.cpp:64

} // module Components

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:306

#if !defined (_COMPONENTS_CONFIGVALUE__ARG_TRAITS_)
#define _COMPONENTS_CONFIGVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Components::ConfigValue>
    : public
        Object_Arg_Traits_T<
            ::Components::ConfigValue *,
            ::Components::ConfigValue_var,
            ::Components::ConfigValue_out,
            TAO::Value_Traits<Components::ConfigValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Components::ConfigValues>
    : public
        Var_Size_Arg_Traits_T<
            ::Components::ConfigValues,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_valuetype\obv_module.cpp:44

namespace OBV_Components
{

  // TAO_IDL - Generated from
  // be\be_visitor_valuetype\valuetype_obv_ch.cpp:44

  // OBV_ class
  class CCM_STUB_Export ConfigValue
    : public virtual Components::ConfigValue,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

  // TAO_IDL - Generated from
  // be\be_visitor_valuetype\field_ch.cpp:608

  virtual void name (char *val);
  virtual void name (const char *val);
  virtual void name (const ::CORBA::String_var &val);
  virtual const char *name (void) const;

public:

  // TAO_IDL - Generated from
  // be\be_visitor_valuetype\field_ch.cpp:459

  virtual void value (const ::CORBA::Any &);
  virtual const ::CORBA::Any &value (void) const;
  virtual ::CORBA::Any &value (void);

public:
  ConfigValue (void);
  ConfigValue (
      const char * _tao_init_name,
      const ::CORBA::Any & _tao_init_value
    );
  virtual ~ConfigValue (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Components_ConfigValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Components_ConfigValue (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::TAO::String_Manager _pd_name;
  ::CORBA::Any _pd_value;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COMPONENTS_CONFIGVALUE__TRAITS_)
#define _COMPONENTS_CONFIGVALUE__TRAITS_

  template<>
  struct CCM_STUB_Export Value_Traits<Components::ConfigValue>
  {
    static void add_ref (Components::ConfigValue *);
    static void remove_ref (Components::ConfigValue *);
    static void release (Components::ConfigValue *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_valuetype\any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Components
{
  CCM_STUB_Export void operator<<= ( ::CORBA::Any &, ConfigValue *); // copying
  CCM_STUB_Export void operator<<= ( ::CORBA::Any &, ConfigValue **); // non-copying
  CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ConfigValue *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

CCM_STUB_Export void operator<<= (::CORBA::Any &, Components::ConfigValue *); // copying
CCM_STUB_Export void operator<<= (::CORBA::Any &, Components::ConfigValue **); // non-copying
CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Components::ConfigValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be\be_visitor_sequence\any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Components
{
  CCM_STUB_Export void operator<<= ( ::CORBA::Any &, const ::Components::ConfigValues &); // copying version
  CCM_STUB_Export void operator<<= ( ::CORBA::Any &, ::Components::ConfigValues*); // noncopying version
  CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Components::ConfigValues *&); // deprecated
  CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Components::ConfigValues *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

CCM_STUB_Export void operator<<= ( ::CORBA::Any &, const Components::ConfigValues &); // copying version
CCM_STUB_Export void operator<<= ( ::CORBA::Any &, Components::ConfigValues*); // noncopying version
CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Components::ConfigValues *&); // deprecated
CCM_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Components::ConfigValues *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be\be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern CCM_STUB_Export void add_ref (Components::ConfigValue *);
  extern CCM_STUB_Export void remove_ref (Components::ConfigValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_valuetype\cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

CCM_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::ConfigValue *);
CCM_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Components::ConfigValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_sequence\cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Components_ConfigValues_H_
#define _TAO_CDR_OP_Components_ConfigValues_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


CCM_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::ConfigValues &_tao_sequence);
CCM_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::ConfigValues &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Components_ConfigValues_H_ */

// TAO_IDL - Generated from
// be\be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "CCM_StandardConfiguratorC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

